{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red153\green168\blue186;\red32\green32\blue32;\red109\green109\blue109;
\red88\green118\blue71;\red191\green100\blue38;\red117\green114\blue185;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c42745\c42745\c42745;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c45882\c44706\c72549;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \

\f1 \cf4 #Input packets as a string, S=Stard, P=Priority, E=Economy\
\cf2 input_packets = [\cf5 "S Mary"\cf6 , \cf5 "P Dee"\cf6 , \cf5 "P Dee"\cf6 , \cf5 "E Eileen"\cf6 , \cf2 \\\
\cf5 "E Mike"\cf6 , \cf5 "E Joe"\cf6 , \cf5 "P Dee"\cf6 , \cf5 "E Vicky"\cf6 , \cf5 "E George"\cf6 ,\cf2 \\\
\cf5 "P Dee"\cf6 , \cf5 "P Joe"\cf6 , \cf5 "E Sally"\cf6 , \cf5 "P Joe"\cf6 , \cf5 "S Pete"\cf6 ,\
\cf5 "P Dee"\cf6 , \cf5 "S Bill"\cf6 , \cf5 "S Chase"\cf6 , \cf5 "E Price"\cf6 , \cf5 "P Dee"\cf6 ,\cf2 \\\
\cf5 "E Sue"\cf2 ]\
\
\cf4 #1) Build 3 queues using append\
#1a: create queue. p=priority, s=standard, e=economy\
\
\cf2 p = []\
s = []\
e = []\
\cf4 #1b: count how many are in the queue-21\
\cf2 num_packets_input = \cf7 len\cf2 (input_packets)\
\
\cf4 #1c: Separate the packets based on first character\
\cf6 for \cf2 x \cf6 in \cf7 range\cf2 (num_packets_input):\
    packet_in = input_packets[x]\
    pclass = packet_in[\cf8 0\cf2 ]\
    \cf6 if \cf2 pclass[\cf8 0\cf2 ] == \cf5 "P"\cf2 :\
        p.append(input_packets[x])\
    \cf6 elif \cf2 pclass[\cf8 0\cf2 ] == \cf5 "S"\cf2 :\
        s.append(input_packets[x])\
    \cf6 else\cf2 :\
        e.append(input_packets[x])\
\
\cf4 #print(p)\
#print(s)\
#print(e)\
\
\cf6 while \cf2 num_packets_input > \cf8 0\cf2 :\
    num_packets_input -= \cf8 1\
\cf4 #2 pop the queue\
#2a: pop priority packets.\
    \cf6 for \cf2 a \cf6 in \cf7 range\cf2 (\cf8 3\cf2 ):\
        \cf6 try\cf2 :\
            num_packets_input -= \cf8 1\
            \cf7 print\cf2 (p[\cf8 0\cf2 ])\
            p.pop(\cf8 0\cf2 )\
        \cf6 except\cf2 :\
            \cf7 print\cf2 (\cf5 "Priority done."\cf2 )\
            \cf6 break\
\cf4 #2b: pop standard packets\
    \cf6 for \cf2 b \cf6 in \cf7 range\cf2 (\cf8 2\cf2 ):\
        \cf6 try\cf2 :\
            num_packets_input -= \cf8 1\
            \cf7 print\cf2 (s[\cf8 0\cf2 ])\
            s.pop(\cf8 0\cf2 )\
        \cf6 except\cf2 :\
            \cf7 print\cf2 (\cf5 "Standard done."\cf2 )\
            \cf6 break\
\cf4 # 2c: pop economy packets\
    \cf6 for \cf2 c \cf6 in \cf7 range\cf2 (\cf8 1\cf2 ):\
        \cf6 try\cf2 :\
            num_packets_input -= \cf8 1\
            \cf7 print\cf2 (e[\cf8 0\cf2 ])\
            e.pop(\cf8 0\cf2 )\
        \cf6 except\cf2 :\
            \cf7 print\cf2 (\cf5 "Economy done."\cf2 )\
            \cf6 break\
\
}